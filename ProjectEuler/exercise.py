#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.
mul = 0
for i in range(1000):
    mul3 = i%3
    mul5 = i%5
    if mul3 == 0 or mul5 == 0:
        mul = mul + i
print(mul)

#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
total=0
def fib(n):
    fibo = []
    for i in range(1,101):
        if i<=2:
            fibo.append(1)
        if i>2:
            x = fibo[i-3]
            y = fibo[i-2]
            z = x + y
            fibo.append(z)
            
    return fibo

num = fib(100)
print(num)

total = 0
i=0
while num[i]<4000000:
    if num[i]%2==0:
        total = total + num[i]
    i=i+1
print(total)

#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
def Largest_Prime_Factor(n):
    prime_factor = 1
    i = 2

    while i <= n / i:
        if n % i == 0:
            prime_factor = i
            n /= i
        else:
            i += 1

    if prime_factor < n:
        prime_factor = n

    return prime_factor

print(Largest_Prime_Factor(600851475143))

#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
#Find the largest palindrome made from the product of two 3-digit numbers.

num_one = 999
num_two = 999
palindromic = []

for i in range(100, num_one+1):
    for j in range(100, num_two+1):
        num = i*j
        if num>=100000:
            c = num%10
            d = (num%100)/10
            d = int(d)
            e = (num%1000)/100
            e = int(e)
            f = (num%10000)/1000
            f = int(f)
            g = (num%100000)/10000
            g = int(g)
            h = (num%1000000)/100000
            h = int(h)

            if (h-c==0 or c-h==0) and (g-d==0 or d-g==0) and (f-e==0 or e-f==0):
                final = num
                palindromic.append(final)

print(max(palindromic))


#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def prime(n):
    while n>0:
        validation = []
        for j in range(1,12):
            if n%j==0:
                validation.append(j)
                large = len(validation)
            else:
                break

        if large==11:
            break
        n=n+1
    return print(n)

prime(2520)

#The sum of the squares of the first ten natural numbers is, 385
#The square of the sum of the first ten natural numbers is, 3025
#Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
#Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

num = 100

sum_cua = (num*(num+1)*(2*num+1))/6
sum_nan = (1+num)*(num/2)
sum_nan = sum_nan*sum_nan
total=sum_nan-sum_cua
print(sum_cua)
print(sum_nan)
print(total)

#By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#What is the 10 001st prime number?

i = 9
ultimo = [2, 3, 5, 7]
while i>0:
    i += 1
    primos = range(2, i-1)
    lista = []
    for j in primos:
        result = i%j
        if result==0:
            lista.append(j)
    if len(lista)==0:
        ultimo.append(i)

    if len(ultimo)==10001:
        break

print(ultimo.pop())